#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")

#@ if data.values.tap.devNamespace != "default" and data.values.tap.devNamespace != "":
---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.tap.devNamespace
---
#@ def config():
#@  return {
#@    "auths": {
#@      data.values.tap.registry.host: {
#@        "username": data.values.tap.credentials.registry.username,
#@        "password": data.values.tap.credentials.registry.password
#@      }
#@    }
#@  }
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: snyk-token-secret
  namespace: #@ data.values.tap.devNamespace
data:
  snyk_token: #@ data.values.tap.credentials.snyk.token
---
apiVersion: v1
kind: Secret
metadata:
  name: carbonblack-token-secret
  namespace: tap-dev
stringData:
  cbc_api_id: #@ data.values.tap.credentials.cbc.appId
  cbc_api_key: #@ data.values.tap.credentials.cbc.appKey
  cbc_org_key: #@ data.values.tap.credentials.cbc.orgKey
  cbc_saas_url: #@ data.values.tap.credentials.cbc.orgUrl
---
apiVersion: v1
kind: Secret
metadata:
  name: git-ssh
  namespace: #@ data.values.tap.devNamespace
  annotations:
    tekton.dev/git-0: https://github.com
type: kubernetes.io/basic-auth
stringData:
  username: #@ data.values.tap.credentials.github.username
  password: #@ data.values.tap.credentials.github.token
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: #@ data.values.tap.devNamespace
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: #@ json.encode(config())
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-registry
  namespace: #@ data.values.tap.devNamespace
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: #@ data.values.tap.devNamespace
secrets:
  - name: registry-credentials
  - name: git-ssh
imagePullSecrets:
  - name: registry-credentials
  - name: tap-registry
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-deliverable
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-workload
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
  - kind: ServiceAccount
    name: default
#@ end
